<%- include("../partials/header"); -%>
<style>

*, *::after, *::before {
  box-sizing: border-box;
}

button {
  background: none;
  appearance: none;
  -webkit-appearance: none;
  -ms-appearance: none;
  -moz-appearance: none;
  border: none;
  cursor: pointer;
}

.page-btn {
  background: #ddd;
  color: #2c303a;
  height: 35px;
  border-radius: 2px;
  padding: 0 10px;
  text-transform: uppercase;
  letter-spacing: 0.1em;
  transition: background 0.3s ease;
  margin: 0 2px
}

.page-btn:first-of-type {
  margin-left: 0;
}

.page-btn:last-of-type {
  margin-right: 0;
}

.page-btn:not([class$="-page"]) {
  width: 35px;
}

.pagination-buttons {
  display: flex;
  align-items: center;
}

.page-btn[class*="-page"] {
  background: #ccc;
  font-size: 0.6em;
  font-weight: 700;
}

.page-btn.active {
  background: #717790;
  color: #fff;
}

.page-btn[disabled] {
  opacity: 0.3;
}
#pagination-show{
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 30px 10px;
}
</style>

<!-- Markup top  card for employee activits -->
<div  class="" >
  <div class="flex justify-between gap-4">
    <div
      class="
        px-4
        py-6
        rounded-md
        bg-pink-200
        border-l-4 border-blue-400
        shadow-lg
      "
    >
      <h3>Avarage Work Start Time</h3>
      <h4><b><%= avgStartTime || '00:00' %> </b></h4>
    </div>
    <div
      class="
        px-4
        py-6
        rounded-md
        bg-yellow-200
        border-l-4 border-green-400
        shadow-lg
      "
    >
      <h3>Avarage Work End Time</h3>
      <h4><b><%= avgEndTime || '00:00' %> </b></h4>
    </div>
    <div
      class="
        px-4
        py-6
        rounded-md
        bg-green-200
        border-l-4 border-yellow-400
        shadow-lg
      "
    >
      <h3>This Week Total Work Hours</h3>
      <h4><b><%= weekHr %> </b></h4>
    </div>
    <div
      class="
        px-4
        py-6
        rounded-md
        bg-yellow-400
        border-l-4 border-pink-400
        shadow-lg
      "
    >
      <h3>This Month Total Work Hours</h3>
      <h4><b><%= monthHr %> </b></h4>
    </div>
  </div>
</div>

<!-- Markup Date range for employee-->

<div  class="mt-5 flex justify-between">
  <div>
    <h4 class="text-xl font-bold">Reports</h4>
  </div>
  <div>
    <input
      type="date"
      class="p-2 bg-blue-200 rounded-md cursor-pointer shadow-md"
      onchange="selectStartDate(event)"
    />
    <small class="p-2 text-md font-bold">To</small>
    <input
      type="date"
      class="p-2 bg-blue-200 rounded-md cursor-pointer shadow-md"
      onchange="selectEndDate(event)"
    />
  </div>
</div> 

<!-- 
<div class="mt-5 flex justify-between">
  <div>
    <h4 class="text-xl font-bold">Reports</h4>
  </div>

<div date-rangepicker class="flex items-center">
  <div class="relative">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="w-5 h-5 text-gray-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path></svg>
        </div>
        <input  type="text"  onblur="selectStartDate(event)" name="start"  
        class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5 datepicker-input" placeholder="Select date start"  >
    </div>
  <span class="mx-4 text-gray-500">to</span>
  <div class="relative">
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="w-5 h-5 text-gray-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path></svg>
    </div>
    <input name="end" type="text"  onchange="selectEndDate(event)"
    class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5 datepicker-input" placeholder="Select date end">
</div>
</div>

</div>   -->



<!-- Markup report table for employee -->
<div  class="bg-white flex justify-center mt-4">
  <div class="col-span-12">
    <div class="overflow-auto lg:overflow-visible">
      <table
        class="table-report text-gray-400 border-separate space-y-6 text-sm"
      >
        <thead class="bg-blue-500 text-white">
          <tr>
            <th class="p-3">Day</th>
            <th class="p-3">DATE</th>
            <th class="p-3 text-left">IN</th>
            <th class="p-3 text-left">OUT</th>
            <th class="p-3 text-left">Type</th>

            <th class="p-3 text-left">Fixed Time</th>
            <th class="p-3 text-left">Working Time</th>
            <th class="p-3 text-left">Less / Extra</th>
          </tr>
        </thead>
        <tbody id="an-user-report">
        
          
          <% userReport.map(el => {%>
            <%# console.log('holiday',el.date_for_holiday) %> 
            <%#console.log('day',el.day) %> 
          <tr
            class="
              <%=
              el.day===
              "Friday"
              ?
              "bg-red-200": el.type === "holiday"
             
              ? "bg-yellow-200" : el.type === "leave" ? "bg-red-400"  :  "bg-blue-200"
              
              
              %>
              text-black
            "
          >
          <td class="p-3"><%= el.day %></td>
            <td class="p-3 font-medium capitalize"><%= el.date  %></td>
            <td class="p-3">
              <%=  el.start  %>
            </td>
          
            <td class="p-3"><%=  el.end %></td>
            <td class="p-3 font-medium"><%= el.day === 'Friday' ? 'Off day' : el.type %></td>

            <td class="p-3"><%= el.day === 'Friday' ? '0' : el.fixed_time  %></td>
            <td class="p-3"><%= el.working_time %></td>
            <td class="p-3">
              <%= el.type !== 'regular'  ? '00:00:00' : el.time_count %>
            </td>
            
          </tr>
          <% }) %>
        </tbody>

        <tfoot id="last-seven-days-total" >
          <% employeeLastSevendaysReportTotal.map(el => {%> 

          <tr class="bg-blue-500 text-center text-white font-bold">
            <td colspan="2">Total = <%= 'Present' + ' ' + el.present + '/' + '7'%>  </td>
          <td class="p-3"><%= el.avgStartTime  || '00' %> </td>
          <td class="p-3"><%= el.avgEndTime  || '00'%> </td>
          <td class="p-3"></td>
          <% console.log( typeof el.fixed_total) %> 
          <td class="p-3"><%= el.fixed_total + 'hr' %></td>
          <td class="p-3"><%= el.weekTotal || '00' %> </td>
          <td class="p-3"><%= el.totalLessORExtra %> </td>
          </tr>
        <% })  %> 
        </tfoot>
      </table>
      <div id="pagination-show">
      </div>
    </div>
  </div>
</div>
<script>

  
 
  const pageNumbers = (total, max, current) => {
  const half = Math.floor(max / 2);
  let to = max
  if (current + half >= total) {
    to = total;
  } else if (current > half) {
    to = current + half
  }
  const from = to - max
  return Array.from({ length: max }, (_, i) => (i + 1) + from)
}

// Pagination Button action function

function PaginationButtons(totalPages, maxPageVisible = 10, currentPage = 1) {
  let pages = pageNumbers(totalPages, maxPageVisible, currentPage)
  let currentPageBtn = null;
  const buttons = new Map()
  const fragment = document.createDocumentFragment()
  const paginationButtonContainer = document.createElement('div');
  paginationButtonContainer.className = 'pagination-buttons'

  const disabled = {
    start: () => pages[0] === 1,
    prev: () => currentPage === 1,
    end: () => pages.slice(-1)[0] === totalPages,
    next: () => currentPage === totalPages,
  }

  // Create Button and button details

  const createAndSetupButtons = (label = '', cls = '', disabled = false, handleClick = () => {}) => {
    const button = document.createElement('button');
    button.textContent = label;
    button.className = `page-btn ${cls}`
    button.disabled = disabled
    button.addEventListener('click', (event) => {
      handleClick(event);
      this.update();
      paginationButtonContainer.value = currentPage;
      paginationButtonContainer.dispatchEvent(new Event('change'));
    })
    return button
  }

  const onPageButtonClick = (e) => currentPage = Number(e.currentTarget.textContent)

  const onPageButtonUpdate = (index) => (btn) => {
    btn.textContent = pages[index]
    if (pages[index] === currentPage) {
      currentPageBtn.classList.remove('active')
      btn.classList.add('active')
      currentPageBtn = btn;
      currentPageBtn.focus()
    }
  }

  buttons.set(createAndSetupButtons('start', 'start-page', disabled.start(), () => currentPage = 1), (btn) => btn.disabled = disabled.start())
  buttons.set(createAndSetupButtons('prev', 'prev-page', disabled.prev(), () => currentPage -= 1), (btn) => btn.disabled = disabled.prev())

  pages.forEach((pageNumber, index) => {
    const isCurrentPage = pageNumber === currentPage
    const button = createAndSetupButtons(pageNumber, isCurrentPage ? 'active' : '', false, onPageButtonClick)
    if (isCurrentPage) {
      currentPageBtn = button;
    }
    buttons.set(button, onPageButtonUpdate(index))
  })

  buttons.set(createAndSetupButtons('next', 'next-page', disabled.next(), () => currentPage += 1), (btn) => btn.disabled = disabled.next())

  buttons.set(createAndSetupButtons('end', 'end-page', disabled.end(), () => currentPage = totalPages), (btn) => btn.disabled = disabled.end())
  buttons.forEach((_, btn) => {
    fragment.appendChild(btn)
  })

  this.render = (container = document.body) => {
    paginationButtonContainer.appendChild(fragment)
    container.appendChild(paginationButtonContainer)
  }

  this.update = (newPageNumber = currentPage) => {
    currentPage = newPageNumber
    pages = pageNumbers(totalPages, maxPageVisible, currentPage)
    buttons.forEach((updateButton, button) => updateButton(button))
  }
  this.onChange = (handler) => {
    paginationButtonContainer.addEventListener('change', handler);
  }
}
</script>
<script src="https://unpkg.com/@themesberg/flowbite@1.1.1/dist/datepicker.bundle.js"></script>
<script src="<%=baseUrl%>/js/report.js"></script>
<%- include("../partials/footer"); -%>
